
C:\Users\wq9975cp\AppData\Local\Temp\build7088061209839185928.tmp/lcd_button_test.cpp.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
}

void __cxa_deleted_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
   0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  40:	0c 94 0c 04 	jmp	0x818	; 0x818 <__vector_16>
  44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_output_PGM>:
  a4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ae <port_to_mode_PGM>:
  ae:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000b8 <__ctors_start>:
  b8:	2d 02       	muls	r18, r29

000000ba <__ctors_end>:
  ba:	11 24       	eor	r1, r1
  bc:	1f be       	out	0x3f, r1	; 63
  be:	cf ef       	ldi	r28, 0xFF	; 255
  c0:	d8 e0       	ldi	r29, 0x08	; 8
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
  c6:	11 e0       	ldi	r17, 0x01	; 1
  c8:	a0 e0       	ldi	r26, 0x00	; 0
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	ec ef       	ldi	r30, 0xFC	; 252
  ce:	fd e0       	ldi	r31, 0x0D	; 13
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
  d2:	05 90       	lpm	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	a8 34       	cpi	r26, 0x48	; 72
  d8:	b1 07       	cpc	r27, r17
  da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	a8 e4       	ldi	r26, 0x48	; 72
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
  e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
  e6:	ac 36       	cpi	r26, 0x6C	; 108
  e8:	b2 07       	cpc	r27, r18
  ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>

000000ec <__do_global_ctors>:
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	ca eb       	ldi	r28, 0xBA	; 186
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	04 c0       	rjmp	.+8      	; 0xfc <__do_global_ctors+0x10>
  f4:	22 97       	sbiw	r28, 0x02	; 2
  f6:	fe 01       	movw	r30, r28
  f8:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__tablejump__>
  fc:	c8 3b       	cpi	r28, 0xB8	; 184
  fe:	d1 07       	cpc	r29, r17
 100:	c9 f7       	brne	.-14     	; 0xf4 <__do_global_ctors+0x8>
 102:	0e 94 a8 05 	call	0xb50	; 0xb50 <main>
 106:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <_exit>

0000010a <__bad_interrupt>:
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <setup>:
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	8e e0       	ldi	r24, 0x0E	; 14
 112:	0e 94 38 05 	call	0xa70	; 0xa70 <pinMode>
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	8e e0       	ldi	r24, 0x0E	; 14
 11a:	0e 94 71 05 	call	0xae2	; 0xae2 <digitalWrite>
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	8a e0       	ldi	r24, 0x0A	; 10
 122:	0e 94 71 05 	call	0xae2	; 0xae2 <digitalWrite>
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	8a e0       	ldi	r24, 0x0A	; 10
 12a:	0e 94 38 05 	call	0xa70	; 0xa70 <pinMode>
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	42 e0       	ldi	r20, 0x02	; 2
 132:	60 e1       	ldi	r22, 0x10	; 16
 134:	8a e4       	ldi	r24, 0x4A	; 74
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN13LiquidCrystal5beginEhhh>
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	8a e4       	ldi	r24, 0x4A	; 74
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN13LiquidCrystal9setCursorEhh>
 148:	6b e0       	ldi	r22, 0x0B	; 11
 14a:	71 e0       	ldi	r23, 0x01	; 1
 14c:	8a e4       	ldi	r24, 0x4A	; 74
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	0e 94 f5 05 	call	0xbea	; 0xbea <_ZN5Print5printEPKc>
 154:	41 e0       	ldi	r20, 0x01	; 1
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	8a e4       	ldi	r24, 0x4A	; 74
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN13LiquidCrystal9setCursorEhh>
 160:	6c e1       	ldi	r22, 0x1C	; 28
 162:	71 e0       	ldi	r23, 0x01	; 1
 164:	8a e4       	ldi	r24, 0x4A	; 74
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0c 94 f5 05 	jmp	0xbea	; 0xbea <_ZN5Print5printEPKc>

0000016c <_Z11ReadButtonsv>:
 16c:	8e e0       	ldi	r24, 0x0E	; 14
 16e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <analogRead>
 172:	8a 30       	cpi	r24, 0x0A	; 10
 174:	91 05       	cpc	r25, r1
 176:	b0 f0       	brcs	.+44     	; 0x1a4 <_Z11ReadButtonsv+0x38>
 178:	9c 01       	movw	r18, r24
 17a:	27 58       	subi	r18, 0x87	; 135
 17c:	31 09       	sbc	r19, r1
 17e:	25 31       	cpi	r18, 0x15	; 21
 180:	31 05       	cpc	r19, r1
 182:	90 f0       	brcs	.+36     	; 0x1a8 <_Z11ReadButtonsv+0x3c>
 184:	28 5b       	subi	r18, 0xB8	; 184
 186:	31 09       	sbc	r19, r1
 188:	25 31       	cpi	r18, 0x15	; 21
 18a:	31 05       	cpc	r19, r1
 18c:	78 f0       	brcs	.+30     	; 0x1ac <_Z11ReadButtonsv+0x40>
 18e:	20 5b       	subi	r18, 0xB0	; 176
 190:	31 09       	sbc	r19, r1
 192:	25 31       	cpi	r18, 0x15	; 21
 194:	31 05       	cpc	r19, r1
 196:	60 f0       	brcs	.+24     	; 0x1b0 <_Z11ReadButtonsv+0x44>
 198:	8b 5d       	subi	r24, 0xDB	; 219
 19a:	92 40       	sbci	r25, 0x02	; 2
 19c:	45 97       	sbiw	r24, 0x15	; 21
 19e:	50 f0       	brcs	.+20     	; 0x1b4 <_Z11ReadButtonsv+0x48>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	09 c0       	rjmp	.+18     	; 0x1b6 <_Z11ReadButtonsv+0x4a>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <_Z11ReadButtonsv+0x4a>
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <_Z11ReadButtonsv+0x4a>
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <_Z11ReadButtonsv+0x4a>
 1b0:	84 e0       	ldi	r24, 0x04	; 4
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <_Z11ReadButtonsv+0x4a>
 1b4:	85 e0       	ldi	r24, 0x05	; 5
 1b6:	90 91 5f 01 	lds	r25, 0x015F
 1ba:	91 11       	cpse	r25, r1
 1bc:	08 c0       	rjmp	.+16     	; 0x1ce <_Z11ReadButtonsv+0x62>
 1be:	88 23       	and	r24, r24
 1c0:	69 f0       	breq	.+26     	; 0x1dc <_Z11ReadButtonsv+0x70>
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	90 93 61 01 	sts	0x0161, r25
 1c8:	10 92 60 01 	sts	0x0160, r1
 1cc:	07 c0       	rjmp	.+14     	; 0x1dc <_Z11ReadButtonsv+0x70>
 1ce:	81 11       	cpse	r24, r1
 1d0:	05 c0       	rjmp	.+10     	; 0x1dc <_Z11ReadButtonsv+0x70>
 1d2:	10 92 61 01 	sts	0x0161, r1
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	90 93 60 01 	sts	0x0160, r25
 1dc:	80 93 5f 01 	sts	0x015F, r24
 1e0:	08 95       	ret

000001e2 <_Z8writeIntii>:
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	00 d0       	rcall	.+0      	; 0x1ec <_Z8writeIntii+0xa>
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	8c 01       	movw	r16, r24
 1f2:	46 2f       	mov	r20, r22
 1f4:	7a 83       	std	Y+2, r23	; 0x02
 1f6:	69 83       	std	Y+1, r22	; 0x01
 1f8:	bc 01       	movw	r22, r24
 1fa:	82 e6       	ldi	r24, 0x62	; 98
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 08 04 	call	0x810	; 0x810 <_ZN11EEPROMClass5writeEih>
 202:	b8 01       	movw	r22, r16
 204:	6f 5f       	subi	r22, 0xFF	; 255
 206:	7f 4f       	sbci	r23, 0xFF	; 255
 208:	4a 81       	ldd	r20, Y+2	; 0x02
 20a:	82 e6       	ldi	r24, 0x62	; 98
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 08 04 	call	0x810	; 0x810 <_ZN11EEPROMClass5writeEih>
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	08 95       	ret

00000220 <_Z7readInti>:
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	ec 01       	movw	r28, r24
 226:	bc 01       	movw	r22, r24
 228:	82 e6       	ldi	r24, 0x62	; 98
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN11EEPROMClass4readEi>
 230:	be 01       	movw	r22, r28
 232:	6f 5f       	subi	r22, 0xFF	; 255
 234:	7f 4f       	sbci	r23, 0xFF	; 255
 236:	82 e6       	ldi	r24, 0x62	; 98
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN11EEPROMClass4readEi>
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <_Z6addTwoll>:
 244:	cf 92       	push	r12
 246:	df 92       	push	r13
 248:	ef 92       	push	r14
 24a:	ff 92       	push	r15
 24c:	6b 01       	movw	r12, r22
 24e:	7c 01       	movw	r14, r24
 250:	c2 0e       	add	r12, r18
 252:	d3 1e       	adc	r13, r19
 254:	e4 1e       	adc	r14, r20
 256:	f5 1e       	adc	r15, r21
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	6a e0       	ldi	r22, 0x0A	; 10
 25c:	8a e4       	ldi	r24, 0x4A	; 74
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN13LiquidCrystal9setCursorEhh>
 264:	2a e0       	ldi	r18, 0x0A	; 10
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	b7 01       	movw	r22, r14
 26a:	a6 01       	movw	r20, r12
 26c:	8a e4       	ldi	r24, 0x4A	; 74
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 57 06 	call	0xcae	; 0xcae <_ZN5Print5printEli>
 274:	c7 01       	movw	r24, r14
 276:	b6 01       	movw	r22, r12
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	df 90       	pop	r13
 27e:	cf 90       	pop	r12
 280:	08 95       	ret

00000282 <loop>:
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z11ReadButtonsv>
 28a:	c8 2f       	mov	r28, r24
 28c:	80 91 61 01 	lds	r24, 0x0161
 290:	81 11       	cpse	r24, r1
 292:	04 c0       	rjmp	.+8      	; 0x29c <loop+0x1a>
 294:	80 91 60 01 	lds	r24, 0x0160
 298:	88 23       	and	r24, r24
 29a:	61 f0       	breq	.+24     	; 0x2b4 <loop+0x32>
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	64 e0       	ldi	r22, 0x04	; 4
 2a0:	8a e4       	ldi	r24, 0x4A	; 74
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN13LiquidCrystal9setCursorEhh>
 2a8:	65 e2       	ldi	r22, 0x25	; 37
 2aa:	71 e0       	ldi	r23, 0x01	; 1
 2ac:	8a e4       	ldi	r24, 0x4A	; 74
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	0e 94 f5 05 	call	0xbea	; 0xbea <_ZN5Print5printEPKc>
 2b4:	c3 30       	cpi	r28, 0x03	; 3
 2b6:	09 f4       	brne	.+2      	; 0x2ba <loop+0x38>
 2b8:	59 c0       	rjmp	.+178    	; 0x36c <loop+0xea>
 2ba:	50 f5       	brcc	.+84     	; 0x310 <loop+0x8e>
 2bc:	c1 30       	cpi	r28, 0x01	; 1
 2be:	09 f4       	brne	.+2      	; 0x2c2 <loop+0x40>
 2c0:	4c c0       	rjmp	.+152    	; 0x35a <loop+0xd8>
 2c2:	c2 30       	cpi	r28, 0x02	; 2
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <loop+0x46>
 2c6:	96 c0       	rjmp	.+300    	; 0x3f4 <loop+0x172>
 2c8:	20 91 00 01 	lds	r18, 0x0100
 2cc:	30 91 01 01 	lds	r19, 0x0101
 2d0:	44 27       	eor	r20, r20
 2d2:	37 fd       	sbrc	r19, 7
 2d4:	40 95       	com	r20
 2d6:	54 2f       	mov	r21, r20
 2d8:	60 91 48 01 	lds	r22, 0x0148
 2dc:	70 91 49 01 	lds	r23, 0x0149
 2e0:	88 27       	eor	r24, r24
 2e2:	77 fd       	sbrc	r23, 7
 2e4:	80 95       	com	r24
 2e6:	98 2f       	mov	r25, r24
 2e8:	0e 94 22 01 	call	0x244	; 0x244 <_Z6addTwoll>
 2ec:	70 93 49 01 	sts	0x0149, r23
 2f0:	60 93 48 01 	sts	0x0148, r22
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	8a e4       	ldi	r24, 0x4A	; 74
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN13LiquidCrystal9setCursorEhh>
 300:	61 e2       	ldi	r22, 0x21	; 33
 302:	71 e0       	ldi	r23, 0x01	; 1
 304:	8a e4       	ldi	r24, 0x4A	; 74
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	0e 94 f5 05 	call	0xbea	; 0xbea <_ZN5Print5printEPKc>
 30c:	40 e0       	ldi	r20, 0x00	; 0
 30e:	54 c0       	rjmp	.+168    	; 0x3b8 <loop+0x136>
 310:	c4 30       	cpi	r28, 0x04	; 4
 312:	09 f4       	brne	.+2      	; 0x316 <loop+0x94>
 314:	61 c0       	rjmp	.+194    	; 0x3d8 <loop+0x156>
 316:	c5 30       	cpi	r28, 0x05	; 5
 318:	09 f0       	breq	.+2      	; 0x31c <loop+0x9a>
 31a:	6c c0       	rjmp	.+216    	; 0x3f4 <loop+0x172>
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	64 e0       	ldi	r22, 0x04	; 4
 320:	8a e4       	ldi	r24, 0x4A	; 74
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN13LiquidCrystal9setCursorEhh>
 328:	62 e3       	ldi	r22, 0x32	; 50
 32a:	71 e0       	ldi	r23, 0x01	; 1
 32c:	8a e4       	ldi	r24, 0x4A	; 74
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	0e 94 f5 05 	call	0xbea	; 0xbea <_ZN5Print5printEPKc>
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	8a e0       	ldi	r24, 0x0A	; 10
 338:	0e 94 71 05 	call	0xae2	; 0xae2 <digitalWrite>
 33c:	66 e9       	ldi	r22, 0x96	; 150
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 85 04 	call	0x90a	; 0x90a <delay>
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	8a e0       	ldi	r24, 0x0A	; 10
 34c:	0e 94 71 05 	call	0xae2	; 0xae2 <digitalWrite>
 350:	66 e9       	ldi	r22, 0x96	; 150
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	4b c0       	rjmp	.+150    	; 0x3f0 <loop+0x16e>
 35a:	8a e0       	ldi	r24, 0x0A	; 10
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 10 01 	call	0x220	; 0x220 <_Z7readInti>
 362:	90 93 49 01 	sts	0x0149, r25
 366:	80 93 48 01 	sts	0x0148, r24
 36a:	3e c0       	rjmp	.+124    	; 0x3e8 <loop+0x166>
 36c:	20 91 00 01 	lds	r18, 0x0100
 370:	30 91 01 01 	lds	r19, 0x0101
 374:	31 95       	neg	r19
 376:	21 95       	neg	r18
 378:	31 09       	sbc	r19, r1
 37a:	44 27       	eor	r20, r20
 37c:	37 fd       	sbrc	r19, 7
 37e:	40 95       	com	r20
 380:	54 2f       	mov	r21, r20
 382:	60 91 48 01 	lds	r22, 0x0148
 386:	70 91 49 01 	lds	r23, 0x0149
 38a:	88 27       	eor	r24, r24
 38c:	77 fd       	sbrc	r23, 7
 38e:	80 95       	com	r24
 390:	98 2f       	mov	r25, r24
 392:	0e 94 22 01 	call	0x244	; 0x244 <_Z6addTwoll>
 396:	70 93 49 01 	sts	0x0149, r23
 39a:	60 93 48 01 	sts	0x0148, r22
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	8a e4       	ldi	r24, 0x4A	; 74
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN13LiquidCrystal9setCursorEhh>
 3aa:	61 e2       	ldi	r22, 0x21	; 33
 3ac:	71 e0       	ldi	r23, 0x01	; 1
 3ae:	8a e4       	ldi	r24, 0x4A	; 74
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 f5 05 	call	0xbea	; 0xbea <_ZN5Print5printEPKc>
 3b6:	49 e0       	ldi	r20, 0x09	; 9
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	8a e4       	ldi	r24, 0x4A	; 74
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN13LiquidCrystal9setCursorEhh>
 3c2:	60 91 48 01 	lds	r22, 0x0148
 3c6:	70 91 49 01 	lds	r23, 0x0149
 3ca:	4a e0       	ldi	r20, 0x0A	; 10
 3cc:	50 e0       	ldi	r21, 0x00	; 0
 3ce:	8a e4       	ldi	r24, 0x4A	; 74
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN5Print5printEii>
 3d6:	08 c0       	rjmp	.+16     	; 0x3e8 <loop+0x166>
 3d8:	60 91 48 01 	lds	r22, 0x0148
 3dc:	70 91 49 01 	lds	r23, 0x0149
 3e0:	8a e0       	ldi	r24, 0x0A	; 10
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z8writeIntii>
 3e8:	68 ec       	ldi	r22, 0xC8	; 200
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 85 04 	call	0x90a	; 0x90a <delay>
 3f4:	0e 94 56 04 	call	0x8ac	; 0x8ac <millis>
 3f8:	28 ee       	ldi	r18, 0xE8	; 232
 3fa:	33 e0       	ldi	r19, 0x03	; 3
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	0e 94 be 06 	call	0xd7c	; 0xd7c <__udivmodsi4>
 404:	ca 01       	movw	r24, r20
 406:	b9 01       	movw	r22, r18
 408:	24 e6       	ldi	r18, 0x64	; 100
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	40 e0       	ldi	r20, 0x00	; 0
 40e:	50 e0       	ldi	r21, 0x00	; 0
 410:	0e 94 be 06 	call	0xd7c	; 0xd7c <__udivmodsi4>
 414:	c6 2f       	mov	r28, r22
 416:	41 e0       	ldi	r20, 0x01	; 1
 418:	6e e0       	ldi	r22, 0x0E	; 14
 41a:	8a e4       	ldi	r24, 0x4A	; 74
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN13LiquidCrystal9setCursorEhh>
 422:	ca 30       	cpi	r28, 0x0A	; 10
 424:	30 f4       	brcc	.+12     	; 0x432 <loop+0x1b0>
 426:	60 e3       	ldi	r22, 0x30	; 48
 428:	71 e0       	ldi	r23, 0x01	; 1
 42a:	8a e4       	ldi	r24, 0x4A	; 74
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	0e 94 f5 05 	call	0xbea	; 0xbea <_ZN5Print5printEPKc>
 432:	4a e0       	ldi	r20, 0x0A	; 10
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	6c 2f       	mov	r22, r28
 438:	8a e4       	ldi	r24, 0x4A	; 74
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_ZN5Print5printEhi>
 440:	80 91 61 01 	lds	r24, 0x0161
 444:	81 11       	cpse	r24, r1
 446:	10 92 61 01 	sts	0x0161, r1
 44a:	80 91 60 01 	lds	r24, 0x0160
 44e:	81 11       	cpse	r24, r1
 450:	10 92 60 01 	sts	0x0160, r1
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	08 95       	ret

0000045a <_GLOBAL__sub_I_buttonJustPressed>:
 45a:	cf 92       	push	r12
 45c:	ef 92       	push	r14
 45e:	0f 93       	push	r16
 460:	87 e0       	ldi	r24, 0x07	; 7
 462:	c8 2e       	mov	r12, r24
 464:	96 e0       	ldi	r25, 0x06	; 6
 466:	e9 2e       	mov	r14, r25
 468:	05 e0       	ldi	r16, 0x05	; 5
 46a:	24 e0       	ldi	r18, 0x04	; 4
 46c:	49 e0       	ldi	r20, 0x09	; 9
 46e:	68 e0       	ldi	r22, 0x08	; 8
 470:	8a e4       	ldi	r24, 0x4A	; 74
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <_ZN13LiquidCrystalC1Ehhhhhh>
 478:	0f 91       	pop	r16
 47a:	ef 90       	pop	r14
 47c:	cf 90       	pop	r12
 47e:	08 95       	ret

00000480 <_ZN13LiquidCrystal11pulseEnableEv>:
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	ec 01       	movw	r28, r24
  digitalWrite(_enable_pin, LOW);
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	8e 81       	ldd	r24, Y+6	; 0x06
 48a:	0e 94 71 05 	call	0xae2	; 0xae2 <digitalWrite>
  delayMicroseconds(1);    
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 ad 04 	call	0x95a	; 0x95a <delayMicroseconds>
  digitalWrite(_enable_pin, HIGH);
 496:	61 e0       	ldi	r22, 0x01	; 1
 498:	8e 81       	ldd	r24, Y+6	; 0x06
 49a:	0e 94 71 05 	call	0xae2	; 0xae2 <digitalWrite>
  delayMicroseconds(1);    // enable pulse must be >450ns
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 ad 04 	call	0x95a	; 0x95a <delayMicroseconds>
  digitalWrite(_enable_pin, LOW);
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	8e 81       	ldd	r24, Y+6	; 0x06
 4aa:	0e 94 71 05 	call	0xae2	; 0xae2 <digitalWrite>
  delayMicroseconds(100);   // commands need > 37us to settle
 4ae:	84 e6       	ldi	r24, 0x64	; 100
 4b0:	90 e0       	ldi	r25, 0x00	; 0
}
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(1);    
  digitalWrite(_enable_pin, HIGH);
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
 4b6:	0c 94 ad 04 	jmp	0x95a	; 0x95a <delayMicroseconds>

000004ba <_ZN13LiquidCrystal10write4bitsEh>:
}

void LiquidCrystal::write4bits(uint8_t value) {
 4ba:	cf 92       	push	r12
 4bc:	df 92       	push	r13
 4be:	ef 92       	push	r14
 4c0:	ff 92       	push	r15
 4c2:	0f 93       	push	r16
 4c4:	1f 93       	push	r17
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	7c 01       	movw	r14, r24
  for (int i = 0; i < 4; i++) {
 4cc:	c0 e0       	ldi	r28, 0x00	; 0
 4ce:	d0 e0       	ldi	r29, 0x00	; 0
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
 4d0:	c6 2e       	mov	r12, r22
 4d2:	d1 2c       	mov	r13, r1
 4d4:	87 01       	movw	r16, r14
 4d6:	0c 0f       	add	r16, r28
 4d8:	1d 1f       	adc	r17, r29
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    pinMode(_data_pins[i], OUTPUT);
 4da:	61 e0       	ldi	r22, 0x01	; 1
 4dc:	f8 01       	movw	r30, r16
 4de:	87 81       	ldd	r24, Z+7	; 0x07
 4e0:	0e 94 38 05 	call	0xa70	; 0xa70 <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
 4e4:	b6 01       	movw	r22, r12
 4e6:	0c 2e       	mov	r0, r28
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <_ZN13LiquidCrystal10write4bitsEh+0x34>
 4ea:	75 95       	asr	r23
 4ec:	67 95       	ror	r22
 4ee:	0a 94       	dec	r0
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <_ZN13LiquidCrystal10write4bitsEh+0x30>
 4f2:	61 70       	andi	r22, 0x01	; 1
 4f4:	f8 01       	movw	r30, r16
 4f6:	87 81       	ldd	r24, Z+7	; 0x07
 4f8:	0e 94 71 05 	call	0xae2	; 0xae2 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
 4fc:	21 96       	adiw	r28, 0x01	; 1
 4fe:	c4 30       	cpi	r28, 0x04	; 4
 500:	d1 05       	cpc	r29, r1
 502:	41 f7       	brne	.-48     	; 0x4d4 <_ZN13LiquidCrystal10write4bitsEh+0x1a>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
 504:	c7 01       	movw	r24, r14
}
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	1f 91       	pop	r17
 50c:	0f 91       	pop	r16
 50e:	ff 90       	pop	r15
 510:	ef 90       	pop	r14
 512:	df 90       	pop	r13
 514:	cf 90       	pop	r12
  for (int i = 0; i < 4; i++) {
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
 516:	0c 94 40 02 	jmp	0x480	; 0x480 <_ZN13LiquidCrystal11pulseEnableEv>

0000051a <_ZN13LiquidCrystal10write8bitsEh>:
}

void LiquidCrystal::write8bits(uint8_t value) {
 51a:	cf 92       	push	r12
 51c:	df 92       	push	r13
 51e:	ef 92       	push	r14
 520:	ff 92       	push	r15
 522:	0f 93       	push	r16
 524:	1f 93       	push	r17
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	7c 01       	movw	r14, r24
  for (int i = 0; i < 8; i++) {
 52c:	c0 e0       	ldi	r28, 0x00	; 0
 52e:	d0 e0       	ldi	r29, 0x00	; 0
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
 530:	c6 2e       	mov	r12, r22
 532:	d1 2c       	mov	r13, r1
 534:	87 01       	movw	r16, r14
 536:	0c 0f       	add	r16, r28
 538:	1d 1f       	adc	r17, r29
  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    pinMode(_data_pins[i], OUTPUT);
 53a:	61 e0       	ldi	r22, 0x01	; 1
 53c:	f8 01       	movw	r30, r16
 53e:	87 81       	ldd	r24, Z+7	; 0x07
 540:	0e 94 38 05 	call	0xa70	; 0xa70 <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
 544:	b6 01       	movw	r22, r12
 546:	0c 2e       	mov	r0, r28
 548:	02 c0       	rjmp	.+4      	; 0x54e <_ZN13LiquidCrystal10write8bitsEh+0x34>
 54a:	75 95       	asr	r23
 54c:	67 95       	ror	r22
 54e:	0a 94       	dec	r0
 550:	e2 f7       	brpl	.-8      	; 0x54a <_ZN13LiquidCrystal10write8bitsEh+0x30>
 552:	61 70       	andi	r22, 0x01	; 1
 554:	f8 01       	movw	r30, r16
 556:	87 81       	ldd	r24, Z+7	; 0x07
 558:	0e 94 71 05 	call	0xae2	; 0xae2 <digitalWrite>

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
 55c:	21 96       	adiw	r28, 0x01	; 1
 55e:	c8 30       	cpi	r28, 0x08	; 8
 560:	d1 05       	cpc	r29, r1
 562:	41 f7       	brne	.-48     	; 0x534 <_ZN13LiquidCrystal10write8bitsEh+0x1a>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
 564:	c7 01       	movw	r24, r14
}
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	ff 90       	pop	r15
 570:	ef 90       	pop	r14
 572:	df 90       	pop	r13
 574:	cf 90       	pop	r12
  for (int i = 0; i < 8; i++) {
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
 576:	0c 94 40 02 	jmp	0x480	; 0x480 <_ZN13LiquidCrystal11pulseEnableEv>

0000057a <_ZN13LiquidCrystal4sendEhh>:
}

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
 57a:	1f 93       	push	r17
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	ec 01       	movw	r28, r24
 582:	16 2f       	mov	r17, r22
  digitalWrite(_rs_pin, mode);
 584:	64 2f       	mov	r22, r20
 586:	8c 81       	ldd	r24, Y+4	; 0x04
 588:	0e 94 71 05 	call	0xae2	; 0xae2 <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 58c:	8d 81       	ldd	r24, Y+5	; 0x05
 58e:	8f 3f       	cpi	r24, 0xFF	; 255
 590:	19 f0       	breq	.+6      	; 0x598 <_ZN13LiquidCrystal4sendEhh+0x1e>
    digitalWrite(_rw_pin, LOW);
 592:	60 e0       	ldi	r22, 0x00	; 0
 594:	0e 94 71 05 	call	0xae2	; 0xae2 <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 598:	8f 85       	ldd	r24, Y+15	; 0x0f
    write8bits(value); 
 59a:	61 2f       	mov	r22, r17
  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
    digitalWrite(_rw_pin, LOW);
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 59c:	84 ff       	sbrs	r24, 4
 59e:	06 c0       	rjmp	.+12     	; 0x5ac <_ZN13LiquidCrystal4sendEhh+0x32>
    write8bits(value); 
 5a0:	ce 01       	movw	r24, r28
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	1f 91       	pop	r17
  if (_rw_pin != 255) { 
    digitalWrite(_rw_pin, LOW);
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
 5a8:	0c 94 8d 02 	jmp	0x51a	; 0x51a <_ZN13LiquidCrystal10write8bitsEh>
  } else {
    write4bits(value>>4);
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	84 e0       	ldi	r24, 0x04	; 4
 5b0:	75 95       	asr	r23
 5b2:	67 95       	ror	r22
 5b4:	8a 95       	dec	r24
 5b6:	e1 f7       	brne	.-8      	; 0x5b0 <_ZN13LiquidCrystal4sendEhh+0x36>
 5b8:	ce 01       	movw	r24, r28
 5ba:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
 5be:	61 2f       	mov	r22, r17
 5c0:	ce 01       	movw	r24, r28
  }
}
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	1f 91       	pop	r17
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
 5c8:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <_ZN13LiquidCrystal10write4bitsEh>

000005cc <_ZN13LiquidCrystal7commandEh>:
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
 5cc:	40 e0       	ldi	r20, 0x00	; 0
 5ce:	0c 94 bd 02 	jmp	0x57a	; 0x57a <_ZN13LiquidCrystal4sendEhh>

000005d2 <_ZN13LiquidCrystal5clearEv>:
}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 5d2:	61 e0       	ldi	r22, 0x01	; 1
 5d4:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_ZN13LiquidCrystal7commandEh>
  delayMicroseconds(2000);  // this command takes a long time!
 5d8:	80 ed       	ldi	r24, 0xD0	; 208
 5da:	97 e0       	ldi	r25, 0x07	; 7
 5dc:	0c 94 ad 04 	jmp	0x95a	; 0x95a <delayMicroseconds>

000005e0 <_ZN13LiquidCrystal9setCursorEhh>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal::setCursor(uint8_t col, uint8_t row)
{
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	cd b7       	in	r28, 0x3d	; 61
 5e6:	de b7       	in	r29, 0x3e	; 62
 5e8:	28 97       	sbiw	r28, 0x08	; 8
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	f8 94       	cli
 5ee:	de bf       	out	0x3e, r29	; 62
 5f0:	0f be       	out	0x3f, r0	; 63
 5f2:	cd bf       	out	0x3d, r28	; 61
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 5f4:	28 e0       	ldi	r18, 0x08	; 8
 5f6:	e3 e0       	ldi	r30, 0x03	; 3
 5f8:	f1 e0       	ldi	r31, 0x01	; 1
 5fa:	de 01       	movw	r26, r28
 5fc:	11 96       	adiw	r26, 0x01	; 1
 5fe:	01 90       	ld	r0, Z+
 600:	0d 92       	st	X+, r0
 602:	2a 95       	dec	r18
 604:	e1 f7       	brne	.-8      	; 0x5fe <_ZN13LiquidCrystal9setCursorEhh+0x1e>
  if ( row >= _numlines ) {
 606:	fc 01       	movw	r30, r24
 608:	23 89       	ldd	r18, Z+19	; 0x13
 60a:	42 17       	cp	r20, r18
 60c:	10 f0       	brcs	.+4      	; 0x612 <_ZN13LiquidCrystal9setCursorEhh+0x32>
    row = _numlines-1;    // we count rows starting w/0
 60e:	4f ef       	ldi	r20, 0xFF	; 255
 610:	42 0f       	add	r20, r18
  }
  
  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 612:	fe 01       	movw	r30, r28
 614:	31 96       	adiw	r30, 0x01	; 1
 616:	e4 0f       	add	r30, r20
 618:	f1 1d       	adc	r31, r1
 61a:	e4 0f       	add	r30, r20
 61c:	f1 1d       	adc	r31, r1
 61e:	20 81       	ld	r18, Z
 620:	26 0f       	add	r18, r22
 622:	20 68       	ori	r18, 0x80	; 128
 624:	62 2f       	mov	r22, r18
}
 626:	28 96       	adiw	r28, 0x08	; 8
 628:	0f b6       	in	r0, 0x3f	; 63
 62a:	f8 94       	cli
 62c:	de bf       	out	0x3e, r29	; 62
 62e:	0f be       	out	0x3f, r0	; 63
 630:	cd bf       	out	0x3d, r28	; 61
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
  if ( row >= _numlines ) {
    row = _numlines-1;    // we count rows starting w/0
  }
  
  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 636:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <_ZN13LiquidCrystal7commandEh>

0000063a <_ZN13LiquidCrystal7displayEv>:
void LiquidCrystal::noDisplay() {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::display() {
  _displaycontrol |= LCD_DISPLAYON;
 63a:	fc 01       	movw	r30, r24
 63c:	60 89       	ldd	r22, Z+16	; 0x10
 63e:	26 2f       	mov	r18, r22
 640:	24 60       	ori	r18, 0x04	; 4
 642:	20 8b       	std	Z+16, r18	; 0x10
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 644:	6c 60       	ori	r22, 0x0C	; 12
 646:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <_ZN13LiquidCrystal7commandEh>

0000064a <_ZN13LiquidCrystal5beginEhhh>:
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	ec 01       	movw	r28, r24
  if (lines > 1) {
 650:	42 30       	cpi	r20, 0x02	; 2
 652:	18 f0       	brcs	.+6      	; 0x65a <_ZN13LiquidCrystal5beginEhhh+0x10>
    _displayfunction |= LCD_2LINE;
 654:	8f 85       	ldd	r24, Y+15	; 0x0f
 656:	88 60       	ori	r24, 0x08	; 8
 658:	8f 87       	std	Y+15, r24	; 0x0f
  }
  _numlines = lines;
 65a:	4b 8b       	std	Y+19, r20	; 0x13
  _currline = 0;
 65c:	1c 8a       	std	Y+20, r1	; 0x14

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != 0) && (lines == 1)) {
 65e:	22 23       	and	r18, r18
 660:	29 f0       	breq	.+10     	; 0x66c <_ZN13LiquidCrystal5beginEhhh+0x22>
 662:	41 30       	cpi	r20, 0x01	; 1
 664:	19 f4       	brne	.+6      	; 0x66c <_ZN13LiquidCrystal5beginEhhh+0x22>
    _displayfunction |= LCD_5x10DOTS;
 666:	8f 85       	ldd	r24, Y+15	; 0x0f
 668:	84 60       	ori	r24, 0x04	; 4
 66a:	8f 87       	std	Y+15, r24	; 0x0f
  }

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  delayMicroseconds(50000); 
 66c:	80 e5       	ldi	r24, 0x50	; 80
 66e:	93 ec       	ldi	r25, 0xC3	; 195
 670:	0e 94 ad 04 	call	0x95a	; 0x95a <delayMicroseconds>
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
 674:	60 e0       	ldi	r22, 0x00	; 0
 676:	8c 81       	ldd	r24, Y+4	; 0x04
 678:	0e 94 71 05 	call	0xae2	; 0xae2 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	8e 81       	ldd	r24, Y+6	; 0x06
 680:	0e 94 71 05 	call	0xae2	; 0xae2 <digitalWrite>
  if (_rw_pin != 255) { 
 684:	8d 81       	ldd	r24, Y+5	; 0x05
 686:	8f 3f       	cpi	r24, 0xFF	; 255
 688:	19 f0       	breq	.+6      	; 0x690 <_ZN13LiquidCrystal5beginEhhh+0x46>
    digitalWrite(_rw_pin, LOW);
 68a:	60 e0       	ldi	r22, 0x00	; 0
 68c:	0e 94 71 05 	call	0xae2	; 0xae2 <digitalWrite>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 690:	6f 85       	ldd	r22, Y+15	; 0x0f
 692:	64 fd       	sbrc	r22, 4
 694:	1d c0       	rjmp	.+58     	; 0x6d0 <_ZN13LiquidCrystal5beginEhhh+0x86>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 696:	63 e0       	ldi	r22, 0x03	; 3
 698:	ce 01       	movw	r24, r28
 69a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN13LiquidCrystal10write4bitsEh>
    delayMicroseconds(4500); // wait min 4.1ms
 69e:	84 e9       	ldi	r24, 0x94	; 148
 6a0:	91 e1       	ldi	r25, 0x11	; 17
 6a2:	0e 94 ad 04 	call	0x95a	; 0x95a <delayMicroseconds>

    // second try
    write4bits(0x03);
 6a6:	63 e0       	ldi	r22, 0x03	; 3
 6a8:	ce 01       	movw	r24, r28
 6aa:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN13LiquidCrystal10write4bitsEh>
    delayMicroseconds(4500); // wait min 4.1ms
 6ae:	84 e9       	ldi	r24, 0x94	; 148
 6b0:	91 e1       	ldi	r25, 0x11	; 17
 6b2:	0e 94 ad 04 	call	0x95a	; 0x95a <delayMicroseconds>
    
    // third go!
    write4bits(0x03); 
 6b6:	63 e0       	ldi	r22, 0x03	; 3
 6b8:	ce 01       	movw	r24, r28
 6ba:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN13LiquidCrystal10write4bitsEh>
    delayMicroseconds(150);
 6be:	86 e9       	ldi	r24, 0x96	; 150
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	0e 94 ad 04 	call	0x95a	; 0x95a <delayMicroseconds>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 6c6:	62 e0       	ldi	r22, 0x02	; 2
 6c8:	ce 01       	movw	r24, r28
 6ca:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN13LiquidCrystal10write4bitsEh>
 6ce:	16 c0       	rjmp	.+44     	; 0x6fc <_ZN13LiquidCrystal5beginEhhh+0xb2>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 6d0:	60 62       	ori	r22, 0x20	; 32
 6d2:	ce 01       	movw	r24, r28
 6d4:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_ZN13LiquidCrystal7commandEh>
    delayMicroseconds(4500);  // wait more than 4.1ms
 6d8:	84 e9       	ldi	r24, 0x94	; 148
 6da:	91 e1       	ldi	r25, 0x11	; 17
 6dc:	0e 94 ad 04 	call	0x95a	; 0x95a <delayMicroseconds>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 6e0:	6f 85       	ldd	r22, Y+15	; 0x0f
 6e2:	60 62       	ori	r22, 0x20	; 32
 6e4:	ce 01       	movw	r24, r28
 6e6:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_ZN13LiquidCrystal7commandEh>
    delayMicroseconds(150);
 6ea:	86 e9       	ldi	r24, 0x96	; 150
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	0e 94 ad 04 	call	0x95a	; 0x95a <delayMicroseconds>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 6f2:	6f 85       	ldd	r22, Y+15	; 0x0f
 6f4:	60 62       	ori	r22, 0x20	; 32
 6f6:	ce 01       	movw	r24, r28
 6f8:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_ZN13LiquidCrystal7commandEh>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 6fc:	6f 85       	ldd	r22, Y+15	; 0x0f
 6fe:	60 62       	ori	r22, 0x20	; 32
 700:	ce 01       	movw	r24, r28
 702:	0e 94 e6 02 	call	0x5cc	; 0x5cc <_ZN13LiquidCrystal7commandEh>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 706:	84 e0       	ldi	r24, 0x04	; 4
 708:	88 8b       	std	Y+16, r24	; 0x10
  display();
 70a:	ce 01       	movw	r24, r28
 70c:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN13LiquidCrystal7displayEv>

  // clear it off
  clear();
 710:	ce 01       	movw	r24, r28
 712:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN13LiquidCrystal5clearEv>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 716:	82 e0       	ldi	r24, 0x02	; 2
 718:	89 8b       	std	Y+17, r24	; 0x11
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 71a:	66 e0       	ldi	r22, 0x06	; 6
 71c:	ce 01       	movw	r24, r28

}
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
  clear();

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 722:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <_ZN13LiquidCrystal7commandEh>

00000726 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
}

void LiquidCrystal::init(uint8_t fourbitmode, uint8_t rs, uint8_t rw, uint8_t enable,
			 uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
			 uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
{
 726:	6f 92       	push	r6
 728:	7f 92       	push	r7
 72a:	8f 92       	push	r8
 72c:	af 92       	push	r10
 72e:	cf 92       	push	r12
 730:	ef 92       	push	r14
 732:	0f 93       	push	r16
 734:	1f 93       	push	r17
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
 73e:	3c 01       	movw	r6, r24
 740:	16 2f       	mov	r17, r22
 742:	84 2f       	mov	r24, r20
 744:	5d 85       	ldd	r21, Y+13	; 0x0d
 746:	4e 85       	ldd	r20, Y+14	; 0x0e
 748:	3f 85       	ldd	r19, Y+15	; 0x0f
 74a:	98 89       	ldd	r25, Y+16	; 0x10
  _rs_pin = rs;
 74c:	f3 01       	movw	r30, r6
 74e:	84 83       	std	Z+4, r24	; 0x04
  _rw_pin = rw;
 750:	25 83       	std	Z+5, r18	; 0x05
  _enable_pin = enable;
 752:	06 83       	std	Z+6, r16	; 0x06
  
  _data_pins[0] = d0;
 754:	e7 82       	std	Z+7, r14	; 0x07
  _data_pins[1] = d1;
 756:	c0 86       	std	Z+8, r12	; 0x08
  _data_pins[2] = d2;
 758:	a1 86       	std	Z+9, r10	; 0x09
  _data_pins[3] = d3; 
 75a:	82 86       	std	Z+10, r8	; 0x0a
  _data_pins[4] = d4;
 75c:	53 87       	std	Z+11, r21	; 0x0b
  _data_pins[5] = d5;
 75e:	44 87       	std	Z+12, r20	; 0x0c
  _data_pins[6] = d6;
 760:	35 87       	std	Z+13, r19	; 0x0d
  _data_pins[7] = d7; 
 762:	96 87       	std	Z+14, r25	; 0x0e

  pinMode(_rs_pin, OUTPUT);
 764:	61 e0       	ldi	r22, 0x01	; 1
 766:	0e 94 38 05 	call	0xa70	; 0xa70 <pinMode>
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
 76a:	f3 01       	movw	r30, r6
 76c:	85 81       	ldd	r24, Z+5	; 0x05
 76e:	8f 3f       	cpi	r24, 0xFF	; 255
 770:	19 f0       	breq	.+6      	; 0x778 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x52>
    pinMode(_rw_pin, OUTPUT);
 772:	61 e0       	ldi	r22, 0x01	; 1
 774:	0e 94 38 05 	call	0xa70	; 0xa70 <pinMode>
  }
  pinMode(_enable_pin, OUTPUT);
 778:	61 e0       	ldi	r22, 0x01	; 1
 77a:	f3 01       	movw	r30, r6
 77c:	86 81       	ldd	r24, Z+6	; 0x06
 77e:	0e 94 38 05 	call	0xa70	; 0xa70 <pinMode>
  
  if (fourbitmode)
 782:	11 23       	and	r17, r17
 784:	19 f0       	breq	.+6      	; 0x78c <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x66>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 786:	f3 01       	movw	r30, r6
 788:	17 86       	std	Z+15, r1	; 0x0f
 78a:	03 c0       	rjmp	.+6      	; 0x792 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x6c>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 78c:	80 e1       	ldi	r24, 0x10	; 16
 78e:	f3 01       	movw	r30, r6
 790:	87 87       	std	Z+15, r24	; 0x0f
  
  begin(16, 1);  
 792:	20 e0       	ldi	r18, 0x00	; 0
 794:	41 e0       	ldi	r20, 0x01	; 1
 796:	60 e1       	ldi	r22, 0x10	; 16
 798:	c3 01       	movw	r24, r6
}
 79a:	df 91       	pop	r29
 79c:	cf 91       	pop	r28
 79e:	1f 91       	pop	r17
 7a0:	0f 91       	pop	r16
 7a2:	ef 90       	pop	r14
 7a4:	cf 90       	pop	r12
 7a6:	af 90       	pop	r10
 7a8:	8f 90       	pop	r8
 7aa:	7f 90       	pop	r7
 7ac:	6f 90       	pop	r6
  if (fourbitmode)
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
 7ae:	0c 94 25 03 	jmp	0x64a	; 0x64a <_ZN13LiquidCrystal5beginEhhh>

000007b2 <_ZN13LiquidCrystalC1Ehhhhhh>:
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
{
  init(1, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

LiquidCrystal::LiquidCrystal(uint8_t rs,  uint8_t enable,
 7b2:	8f 92       	push	r8
 7b4:	af 92       	push	r10
 7b6:	cf 92       	push	r12
 7b8:	ef 92       	push	r14
 7ba:	0f 93       	push	r16
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 7bc:	dc 01       	movw	r26, r24
 7be:	13 96       	adiw	r26, 0x03	; 3
 7c0:	1c 92       	st	X, r1
 7c2:	1e 92       	st	-X, r1
 7c4:	12 97       	sbiw	r26, 0x02	; 2
			     uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
 7c6:	e3 e4       	ldi	r30, 0x43	; 67
 7c8:	f1 e0       	ldi	r31, 0x01	; 1
 7ca:	ed 93       	st	X+, r30
 7cc:	fc 93       	st	X, r31
{
  init(1, rs, 255, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 7ce:	1f 92       	push	r1
 7d0:	1f 92       	push	r1
 7d2:	1f 92       	push	r1
 7d4:	1f 92       	push	r1
 7d6:	8c 2c       	mov	r8, r12
 7d8:	ae 2c       	mov	r10, r14
 7da:	c0 2e       	mov	r12, r16
 7dc:	e2 2e       	mov	r14, r18
 7de:	04 2f       	mov	r16, r20
 7e0:	2f ef       	ldi	r18, 0xFF	; 255
 7e2:	46 2f       	mov	r20, r22
 7e4:	61 e0       	ldi	r22, 0x01	; 1
 7e6:	0e 94 93 03 	call	0x726	; 0x726 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
 7ea:	0f 90       	pop	r0
 7ec:	0f 90       	pop	r0
 7ee:	0f 90       	pop	r0
 7f0:	0f 90       	pop	r0
}
 7f2:	0f 91       	pop	r16
 7f4:	ef 90       	pop	r14
 7f6:	cf 90       	pop	r12
 7f8:	af 90       	pop	r10
 7fa:	8f 90       	pop	r8
 7fc:	08 95       	ret

000007fe <_ZN13LiquidCrystal5writeEh>:
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
 7fe:	41 e0       	ldi	r20, 0x01	; 1
 800:	0e 94 bd 02 	call	0x57a	; 0x57a <_ZN13LiquidCrystal4sendEhh>
  return 1; // assume sucess
}
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	08 95       	ret

0000080a <_ZN11EEPROMClass4readEi>:
/******************************************************************************
 * User API
 ******************************************************************************/

uint8_t EEPROMClass::read(int address)
{
 80a:	cb 01       	movw	r24, r22
	return eeprom_read_byte((unsigned char *) address);
 80c:	0c 94 e6 06 	jmp	0xdcc	; 0xdcc <__eerd_byte_m328p>

00000810 <_ZN11EEPROMClass5writeEih>:
}

void EEPROMClass::write(int address, uint8_t value)
{
 810:	cb 01       	movw	r24, r22
	eeprom_write_byte((unsigned char *) address, value);
 812:	64 2f       	mov	r22, r20
 814:	0c 94 ee 06 	jmp	0xddc	; 0xddc <__eewr_byte_m328p>

00000818 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 818:	1f 92       	push	r1
 81a:	0f 92       	push	r0
 81c:	0f b6       	in	r0, 0x3f	; 63
 81e:	0f 92       	push	r0
 820:	11 24       	eor	r1, r1
 822:	2f 93       	push	r18
 824:	3f 93       	push	r19
 826:	8f 93       	push	r24
 828:	9f 93       	push	r25
 82a:	af 93       	push	r26
 82c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 82e:	80 91 64 01 	lds	r24, 0x0164
 832:	90 91 65 01 	lds	r25, 0x0165
 836:	a0 91 66 01 	lds	r26, 0x0166
 83a:	b0 91 67 01 	lds	r27, 0x0167
	unsigned char f = timer0_fract;
 83e:	30 91 63 01 	lds	r19, 0x0163

	m += MILLIS_INC;
	f += FRACT_INC;
 842:	23 e0       	ldi	r18, 0x03	; 3
 844:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 846:	2d 37       	cpi	r18, 0x7D	; 125
 848:	20 f4       	brcc	.+8      	; 0x852 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 84a:	01 96       	adiw	r24, 0x01	; 1
 84c:	a1 1d       	adc	r26, r1
 84e:	b1 1d       	adc	r27, r1
 850:	05 c0       	rjmp	.+10     	; 0x85c <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 852:	26 e8       	ldi	r18, 0x86	; 134
 854:	23 0f       	add	r18, r19
		m += 1;
 856:	02 96       	adiw	r24, 0x02	; 2
 858:	a1 1d       	adc	r26, r1
 85a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 85c:	20 93 63 01 	sts	0x0163, r18
	timer0_millis = m;
 860:	80 93 64 01 	sts	0x0164, r24
 864:	90 93 65 01 	sts	0x0165, r25
 868:	a0 93 66 01 	sts	0x0166, r26
 86c:	b0 93 67 01 	sts	0x0167, r27
	timer0_overflow_count++;
 870:	80 91 68 01 	lds	r24, 0x0168
 874:	90 91 69 01 	lds	r25, 0x0169
 878:	a0 91 6a 01 	lds	r26, 0x016A
 87c:	b0 91 6b 01 	lds	r27, 0x016B
 880:	01 96       	adiw	r24, 0x01	; 1
 882:	a1 1d       	adc	r26, r1
 884:	b1 1d       	adc	r27, r1
 886:	80 93 68 01 	sts	0x0168, r24
 88a:	90 93 69 01 	sts	0x0169, r25
 88e:	a0 93 6a 01 	sts	0x016A, r26
 892:	b0 93 6b 01 	sts	0x016B, r27
}
 896:	bf 91       	pop	r27
 898:	af 91       	pop	r26
 89a:	9f 91       	pop	r25
 89c:	8f 91       	pop	r24
 89e:	3f 91       	pop	r19
 8a0:	2f 91       	pop	r18
 8a2:	0f 90       	pop	r0
 8a4:	0f be       	out	0x3f, r0	; 63
 8a6:	0f 90       	pop	r0
 8a8:	1f 90       	pop	r1
 8aa:	18 95       	reti

000008ac <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
 8ac:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
 8ae:	f8 94       	cli
	m = timer0_millis;
 8b0:	60 91 64 01 	lds	r22, 0x0164
 8b4:	70 91 65 01 	lds	r23, 0x0165
 8b8:	80 91 66 01 	lds	r24, 0x0166
 8bc:	90 91 67 01 	lds	r25, 0x0167
	SREG = oldSREG;
 8c0:	2f bf       	out	0x3f, r18	; 63

	return m;
}
 8c2:	08 95       	ret

000008c4 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 8c4:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 8c6:	f8 94       	cli
	m = timer0_overflow_count;
 8c8:	80 91 68 01 	lds	r24, 0x0168
 8cc:	90 91 69 01 	lds	r25, 0x0169
 8d0:	a0 91 6a 01 	lds	r26, 0x016A
 8d4:	b0 91 6b 01 	lds	r27, 0x016B
#if defined(TCNT0)
	t = TCNT0;
 8d8:	26 b5       	in	r18, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 8da:	a8 9b       	sbis	0x15, 0	; 21
 8dc:	05 c0       	rjmp	.+10     	; 0x8e8 <micros+0x24>
 8de:	2f 3f       	cpi	r18, 0xFF	; 255
 8e0:	19 f0       	breq	.+6      	; 0x8e8 <micros+0x24>
		m++;
 8e2:	01 96       	adiw	r24, 0x01	; 1
 8e4:	a1 1d       	adc	r26, r1
 8e6:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 8e8:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 8ea:	66 27       	eor	r22, r22
 8ec:	78 2f       	mov	r23, r24
 8ee:	89 2f       	mov	r24, r25
 8f0:	9a 2f       	mov	r25, r26
 8f2:	62 0f       	add	r22, r18
 8f4:	71 1d       	adc	r23, r1
 8f6:	81 1d       	adc	r24, r1
 8f8:	91 1d       	adc	r25, r1
 8fa:	42 e0       	ldi	r20, 0x02	; 2
 8fc:	66 0f       	add	r22, r22
 8fe:	77 1f       	adc	r23, r23
 900:	88 1f       	adc	r24, r24
 902:	99 1f       	adc	r25, r25
 904:	4a 95       	dec	r20
 906:	d1 f7       	brne	.-12     	; 0x8fc <micros+0x38>
}
 908:	08 95       	ret

0000090a <delay>:

void delay(unsigned long ms)
{
 90a:	cf 92       	push	r12
 90c:	df 92       	push	r13
 90e:	ef 92       	push	r14
 910:	ff 92       	push	r15
 912:	cf 93       	push	r28
 914:	df 93       	push	r29
 916:	6b 01       	movw	r12, r22
 918:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
 91a:	0e 94 62 04 	call	0x8c4	; 0x8c4 <micros>
 91e:	eb 01       	movw	r28, r22

	while (ms > 0) {
 920:	c1 14       	cp	r12, r1
 922:	d1 04       	cpc	r13, r1
 924:	e1 04       	cpc	r14, r1
 926:	f1 04       	cpc	r15, r1
 928:	89 f0       	breq	.+34     	; 0x94c <delay+0x42>
		yield();
 92a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <yield>
		if (((uint16_t)micros() - start) >= 1000) {
 92e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <micros>
 932:	6c 1b       	sub	r22, r28
 934:	7d 0b       	sbc	r23, r29
 936:	68 3e       	cpi	r22, 0xE8	; 232
 938:	73 40       	sbci	r23, 0x03	; 3
 93a:	90 f3       	brcs	.-28     	; 0x920 <delay+0x16>
			ms--;
 93c:	81 e0       	ldi	r24, 0x01	; 1
 93e:	c8 1a       	sub	r12, r24
 940:	d1 08       	sbc	r13, r1
 942:	e1 08       	sbc	r14, r1
 944:	f1 08       	sbc	r15, r1
			start += 1000;
 946:	c8 51       	subi	r28, 0x18	; 24
 948:	dc 4f       	sbci	r29, 0xFC	; 252
 94a:	ea cf       	rjmp	.-44     	; 0x920 <delay+0x16>
		}
	}
}
 94c:	df 91       	pop	r29
 94e:	cf 91       	pop	r28
 950:	ff 90       	pop	r15
 952:	ef 90       	pop	r14
 954:	df 90       	pop	r13
 956:	cf 90       	pop	r12
 958:	08 95       	ret

0000095a <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
 95a:	01 97       	sbiw	r24, 0x01	; 1
 95c:	39 f0       	breq	.+14     	; 0x96c <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
 95e:	88 0f       	add	r24, r24
 960:	99 1f       	adc	r25, r25
 962:	88 0f       	add	r24, r24
 964:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
 966:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
 968:	01 97       	sbiw	r24, 0x01	; 1
 96a:	f1 f7       	brne	.-4      	; 0x968 <delayMicroseconds+0xe>
 96c:	08 95       	ret

0000096e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 96e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 970:	84 b5       	in	r24, 0x24	; 36
 972:	82 60       	ori	r24, 0x02	; 2
 974:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 976:	84 b5       	in	r24, 0x24	; 36
 978:	81 60       	ori	r24, 0x01	; 1
 97a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 97c:	85 b5       	in	r24, 0x25	; 37
 97e:	82 60       	ori	r24, 0x02	; 2
 980:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 982:	85 b5       	in	r24, 0x25	; 37
 984:	81 60       	ori	r24, 0x01	; 1
 986:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 988:	ee e6       	ldi	r30, 0x6E	; 110
 98a:	f0 e0       	ldi	r31, 0x00	; 0
 98c:	80 81       	ld	r24, Z
 98e:	81 60       	ori	r24, 0x01	; 1
 990:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 992:	e1 e8       	ldi	r30, 0x81	; 129
 994:	f0 e0       	ldi	r31, 0x00	; 0
 996:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 998:	80 81       	ld	r24, Z
 99a:	82 60       	ori	r24, 0x02	; 2
 99c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 99e:	80 81       	ld	r24, Z
 9a0:	81 60       	ori	r24, 0x01	; 1
 9a2:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 9a4:	e0 e8       	ldi	r30, 0x80	; 128
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	80 81       	ld	r24, Z
 9aa:	81 60       	ori	r24, 0x01	; 1
 9ac:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 9ae:	e1 eb       	ldi	r30, 0xB1	; 177
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	80 81       	ld	r24, Z
 9b4:	84 60       	ori	r24, 0x04	; 4
 9b6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 9b8:	e0 eb       	ldi	r30, 0xB0	; 176
 9ba:	f0 e0       	ldi	r31, 0x00	; 0
 9bc:	80 81       	ld	r24, Z
 9be:	81 60       	ori	r24, 0x01	; 1
 9c0:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 9c2:	ea e7       	ldi	r30, 0x7A	; 122
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
 9c6:	80 81       	ld	r24, Z
 9c8:	84 60       	ori	r24, 0x04	; 4
 9ca:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 9cc:	80 81       	ld	r24, Z
 9ce:	82 60       	ori	r24, 0x02	; 2
 9d0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 9d2:	80 81       	ld	r24, Z
 9d4:	81 60       	ori	r24, 0x01	; 1
 9d6:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 9d8:	80 81       	ld	r24, Z
 9da:	80 68       	ori	r24, 0x80	; 128
 9dc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 9de:	10 92 c1 00 	sts	0x00C1, r1
 9e2:	08 95       	ret

000009e4 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
 9e4:	8e 30       	cpi	r24, 0x0E	; 14
 9e6:	08 f0       	brcs	.+2      	; 0x9ea <analogRead+0x6>
 9e8:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
 9ea:	87 70       	andi	r24, 0x07	; 7
 9ec:	20 91 02 01 	lds	r18, 0x0102
 9f0:	90 e4       	ldi	r25, 0x40	; 64
 9f2:	29 9f       	mul	r18, r25
 9f4:	90 01       	movw	r18, r0
 9f6:	11 24       	eor	r1, r1
 9f8:	82 2b       	or	r24, r18
 9fa:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
 9fe:	80 91 7a 00 	lds	r24, 0x007A
 a02:	80 64       	ori	r24, 0x40	; 64
 a04:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
 a08:	80 91 7a 00 	lds	r24, 0x007A
 a0c:	86 fd       	sbrc	r24, 6
 a0e:	fc cf       	rjmp	.-8      	; 0xa08 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
 a10:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;
 a14:	20 91 79 00 	lds	r18, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
 a18:	90 e0       	ldi	r25, 0x00	; 0
}
 a1a:	92 2b       	or	r25, r18
 a1c:	08 95       	ret

00000a1e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 a1e:	83 30       	cpi	r24, 0x03	; 3
 a20:	81 f0       	breq	.+32     	; 0xa42 <turnOffPWM+0x24>
 a22:	28 f4       	brcc	.+10     	; 0xa2e <turnOffPWM+0x10>
 a24:	81 30       	cpi	r24, 0x01	; 1
 a26:	99 f0       	breq	.+38     	; 0xa4e <turnOffPWM+0x30>
 a28:	82 30       	cpi	r24, 0x02	; 2
 a2a:	a1 f0       	breq	.+40     	; 0xa54 <turnOffPWM+0x36>
 a2c:	08 95       	ret
 a2e:	87 30       	cpi	r24, 0x07	; 7
 a30:	a9 f0       	breq	.+42     	; 0xa5c <turnOffPWM+0x3e>
 a32:	88 30       	cpi	r24, 0x08	; 8
 a34:	b9 f0       	breq	.+46     	; 0xa64 <turnOffPWM+0x46>
 a36:	84 30       	cpi	r24, 0x04	; 4
 a38:	d1 f4       	brne	.+52     	; 0xa6e <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 a3a:	80 91 80 00 	lds	r24, 0x0080
 a3e:	8f 7d       	andi	r24, 0xDF	; 223
 a40:	03 c0       	rjmp	.+6      	; 0xa48 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 a42:	80 91 80 00 	lds	r24, 0x0080
 a46:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 a48:	80 93 80 00 	sts	0x0080, r24
 a4c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 a4e:	84 b5       	in	r24, 0x24	; 36
 a50:	8f 77       	andi	r24, 0x7F	; 127
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 a54:	84 b5       	in	r24, 0x24	; 36
 a56:	8f 7d       	andi	r24, 0xDF	; 223
 a58:	84 bd       	out	0x24, r24	; 36
 a5a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 a5c:	80 91 b0 00 	lds	r24, 0x00B0
 a60:	8f 77       	andi	r24, 0x7F	; 127
 a62:	03 c0       	rjmp	.+6      	; 0xa6a <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 a64:	80 91 b0 00 	lds	r24, 0x00B0
 a68:	8f 7d       	andi	r24, 0xDF	; 223
 a6a:	80 93 b0 00 	sts	0x00B0, r24
 a6e:	08 95       	ret

00000a70 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 a70:	cf 93       	push	r28
 a72:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	fc 01       	movw	r30, r24
 a78:	e4 58       	subi	r30, 0x84	; 132
 a7a:	ff 4f       	sbci	r31, 0xFF	; 255
 a7c:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 a7e:	fc 01       	movw	r30, r24
 a80:	e0 57       	subi	r30, 0x70	; 112
 a82:	ff 4f       	sbci	r31, 0xFF	; 255
 a84:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 a86:	88 23       	and	r24, r24
 a88:	49 f1       	breq	.+82     	; 0xadc <pinMode+0x6c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 a8a:	90 e0       	ldi	r25, 0x00	; 0
 a8c:	88 0f       	add	r24, r24
 a8e:	99 1f       	adc	r25, r25
 a90:	fc 01       	movw	r30, r24
 a92:	e2 55       	subi	r30, 0x52	; 82
 a94:	ff 4f       	sbci	r31, 0xFF	; 255
 a96:	a5 91       	lpm	r26, Z+
 a98:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
 a9a:	8c 55       	subi	r24, 0x5C	; 92
 a9c:	9f 4f       	sbci	r25, 0xFF	; 255
 a9e:	fc 01       	movw	r30, r24
 aa0:	c5 91       	lpm	r28, Z+
 aa2:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
 aa4:	9f b7       	in	r25, 0x3f	; 63

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
 aa6:	61 11       	cpse	r22, r1
 aa8:	08 c0       	rjmp	.+16     	; 0xaba <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
 aaa:	f8 94       	cli
		*reg &= ~bit;
 aac:	8c 91       	ld	r24, X
 aae:	20 95       	com	r18
 ab0:	82 23       	and	r24, r18
 ab2:	8c 93       	st	X, r24
		*out &= ~bit;
 ab4:	88 81       	ld	r24, Y
 ab6:	82 23       	and	r24, r18
 ab8:	0a c0       	rjmp	.+20     	; 0xace <pinMode+0x5e>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 aba:	62 30       	cpi	r22, 0x02	; 2
 abc:	51 f4       	brne	.+20     	; 0xad2 <pinMode+0x62>
		uint8_t oldSREG = SREG;
                cli();
 abe:	f8 94       	cli
		*reg &= ~bit;
 ac0:	8c 91       	ld	r24, X
 ac2:	32 2f       	mov	r19, r18
 ac4:	30 95       	com	r19
 ac6:	83 23       	and	r24, r19
 ac8:	8c 93       	st	X, r24
		*out |= bit;
 aca:	88 81       	ld	r24, Y
 acc:	82 2b       	or	r24, r18
 ace:	88 83       	st	Y, r24
 ad0:	04 c0       	rjmp	.+8      	; 0xada <pinMode+0x6a>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
 ad2:	f8 94       	cli
		*reg |= bit;
 ad4:	8c 91       	ld	r24, X
 ad6:	82 2b       	or	r24, r18
 ad8:	8c 93       	st	X, r24
		SREG = oldSREG;
 ada:	9f bf       	out	0x3f, r25	; 63
	}
}
 adc:	df 91       	pop	r29
 ade:	cf 91       	pop	r28
 ae0:	08 95       	ret

00000ae2 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 ae2:	0f 93       	push	r16
 ae4:	1f 93       	push	r17
 ae6:	cf 93       	push	r28
 ae8:	df 93       	push	r29
 aea:	1f 92       	push	r1
 aec:	cd b7       	in	r28, 0x3d	; 61
 aee:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
 af0:	28 2f       	mov	r18, r24
 af2:	30 e0       	ldi	r19, 0x00	; 0
 af4:	f9 01       	movw	r30, r18
 af6:	e8 59       	subi	r30, 0x98	; 152
 af8:	ff 4f       	sbci	r31, 0xFF	; 255
 afa:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 afc:	f9 01       	movw	r30, r18
 afe:	e4 58       	subi	r30, 0x84	; 132
 b00:	ff 4f       	sbci	r31, 0xFF	; 255
 b02:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
 b04:	f9 01       	movw	r30, r18
 b06:	e0 57       	subi	r30, 0x70	; 112
 b08:	ff 4f       	sbci	r31, 0xFF	; 255
 b0a:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 b0c:	00 23       	and	r16, r16
 b0e:	c9 f0       	breq	.+50     	; 0xb42 <digitalWrite+0x60>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 b10:	88 23       	and	r24, r24
 b12:	21 f0       	breq	.+8      	; 0xb1c <digitalWrite+0x3a>
 b14:	69 83       	std	Y+1, r22	; 0x01
 b16:	0e 94 0f 05 	call	0xa1e	; 0xa1e <turnOffPWM>
 b1a:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
 b1c:	e0 2f       	mov	r30, r16
 b1e:	f0 e0       	ldi	r31, 0x00	; 0
 b20:	ee 0f       	add	r30, r30
 b22:	ff 1f       	adc	r31, r31
 b24:	ec 55       	subi	r30, 0x5C	; 92
 b26:	ff 4f       	sbci	r31, 0xFF	; 255
 b28:	a5 91       	lpm	r26, Z+
 b2a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 b2c:	9f b7       	in	r25, 0x3f	; 63
	cli();
 b2e:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
 b30:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
 b32:	61 11       	cpse	r22, r1
 b34:	03 c0       	rjmp	.+6      	; 0xb3c <digitalWrite+0x5a>
		*out &= ~bit;
 b36:	10 95       	com	r17
 b38:	81 23       	and	r24, r17
 b3a:	01 c0       	rjmp	.+2      	; 0xb3e <digitalWrite+0x5c>
	} else {
		*out |= bit;
 b3c:	81 2b       	or	r24, r17
 b3e:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
 b40:	9f bf       	out	0x3f, r25	; 63
}
 b42:	0f 90       	pop	r0
 b44:	df 91       	pop	r29
 b46:	cf 91       	pop	r28
 b48:	1f 91       	pop	r17
 b4a:	0f 91       	pop	r16
 b4c:	08 95       	ret

00000b4e <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 b4e:	08 95       	ret

00000b50 <main>:

int main(void)
{
	init();
 b50:	0e 94 b7 04 	call	0x96e	; 0x96e <init>

	initVariant();
 b54:	0e 94 a7 05 	call	0xb4e	; 0xb4e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 b58:	0e 94 87 00 	call	0x10e	; 0x10e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 b5c:	c0 e0       	ldi	r28, 0x00	; 0
 b5e:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 b60:	0e 94 41 01 	call	0x282	; 0x282 <loop>
		if (serialEventRun) serialEventRun();
 b64:	20 97       	sbiw	r28, 0x00	; 0
 b66:	e1 f3       	breq	.-8      	; 0xb60 <main+0x10>
 b68:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 b6c:	f9 cf       	rjmp	.-14     	; 0xb60 <main+0x10>

00000b6e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 b6e:	cf 92       	push	r12
 b70:	df 92       	push	r13
 b72:	ef 92       	push	r14
 b74:	ff 92       	push	r15
 b76:	0f 93       	push	r16
 b78:	1f 93       	push	r17
 b7a:	cf 93       	push	r28
 b7c:	df 93       	push	r29
 b7e:	6c 01       	movw	r12, r24
 b80:	7a 01       	movw	r14, r20
 b82:	eb 01       	movw	r28, r22
 b84:	e6 0e       	add	r14, r22
 b86:	f7 1e       	adc	r15, r23
  size_t n = 0;
 b88:	00 e0       	ldi	r16, 0x00	; 0
 b8a:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
 b8c:	ce 15       	cp	r28, r14
 b8e:	df 05       	cpc	r29, r15
 b90:	61 f0       	breq	.+24     	; 0xbaa <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
 b92:	69 91       	ld	r22, Y+
 b94:	d6 01       	movw	r26, r12
 b96:	ed 91       	ld	r30, X+
 b98:	fc 91       	ld	r31, X
 b9a:	01 90       	ld	r0, Z+
 b9c:	f0 81       	ld	r31, Z
 b9e:	e0 2d       	mov	r30, r0
 ba0:	c6 01       	movw	r24, r12
 ba2:	09 95       	icall
 ba4:	08 0f       	add	r16, r24
 ba6:	19 1f       	adc	r17, r25
 ba8:	f1 cf       	rjmp	.-30     	; 0xb8c <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
 baa:	c8 01       	movw	r24, r16
 bac:	df 91       	pop	r29
 bae:	cf 91       	pop	r28
 bb0:	1f 91       	pop	r17
 bb2:	0f 91       	pop	r16
 bb4:	ff 90       	pop	r15
 bb6:	ef 90       	pop	r14
 bb8:	df 90       	pop	r13
 bba:	cf 90       	pop	r12
 bbc:	08 95       	ret

00000bbe <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 bbe:	61 15       	cp	r22, r1
 bc0:	71 05       	cpc	r23, r1
 bc2:	81 f0       	breq	.+32     	; 0xbe4 <_ZN5Print5writeEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
 bc4:	db 01       	movw	r26, r22
 bc6:	0d 90       	ld	r0, X+
 bc8:	00 20       	and	r0, r0
 bca:	e9 f7       	brne	.-6      	; 0xbc6 <_ZN5Print5writeEPKc+0x8>
 bcc:	ad 01       	movw	r20, r26
 bce:	41 50       	subi	r20, 0x01	; 1
 bd0:	51 09       	sbc	r21, r1
 bd2:	46 1b       	sub	r20, r22
 bd4:	57 0b       	sbc	r21, r23
 bd6:	dc 01       	movw	r26, r24
 bd8:	ed 91       	ld	r30, X+
 bda:	fc 91       	ld	r31, X
 bdc:	02 80       	ldd	r0, Z+2	; 0x02
 bde:	f3 81       	ldd	r31, Z+3	; 0x03
 be0:	e0 2d       	mov	r30, r0
 be2:	09 94       	ijmp
    }
 be4:	80 e0       	ldi	r24, 0x00	; 0
 be6:	90 e0       	ldi	r25, 0x00	; 0
 be8:	08 95       	ret

00000bea <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
 bea:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <_ZN5Print5writeEPKc>

00000bee <_ZN5Print5printEc>:
}

size_t Print::print(char c)
{
  return write(c);
 bee:	dc 01       	movw	r26, r24
 bf0:	ed 91       	ld	r30, X+
 bf2:	fc 91       	ld	r31, X
 bf4:	01 90       	ld	r0, Z+
 bf6:	f0 81       	ld	r31, Z
 bf8:	e0 2d       	mov	r30, r0
 bfa:	09 94       	ijmp

00000bfc <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 bfc:	8f 92       	push	r8
 bfe:	9f 92       	push	r9
 c00:	af 92       	push	r10
 c02:	bf 92       	push	r11
 c04:	cf 92       	push	r12
 c06:	df 92       	push	r13
 c08:	ef 92       	push	r14
 c0a:	ff 92       	push	r15
 c0c:	0f 93       	push	r16
 c0e:	1f 93       	push	r17
 c10:	cf 93       	push	r28
 c12:	df 93       	push	r29
 c14:	cd b7       	in	r28, 0x3d	; 61
 c16:	de b7       	in	r29, 0x3e	; 62
 c18:	a1 97       	sbiw	r28, 0x21	; 33
 c1a:	0f b6       	in	r0, 0x3f	; 63
 c1c:	f8 94       	cli
 c1e:	de bf       	out	0x3e, r29	; 62
 c20:	0f be       	out	0x3f, r0	; 63
 c22:	cd bf       	out	0x3d, r28	; 61
 c24:	7c 01       	movw	r14, r24
 c26:	c4 2e       	mov	r12, r20
 c28:	e5 2f       	mov	r30, r21
 c2a:	cb 01       	movw	r24, r22
 c2c:	d2 2e       	mov	r13, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 c2e:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 c30:	21 e0       	ldi	r18, 0x01	; 1
 c32:	2d 15       	cp	r18, r13
 c34:	10 f0       	brcs	.+4      	; 0xc3a <_ZN5Print11printNumberEmh+0x3e>
 c36:	2a e0       	ldi	r18, 0x0A	; 10
 c38:	d2 2e       	mov	r13, r18
 c3a:	8e 01       	movw	r16, r28
 c3c:	0f 5d       	subi	r16, 0xDF	; 223
 c3e:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
 c40:	8d 2c       	mov	r8, r13
 c42:	91 2c       	mov	r9, r1
 c44:	a1 2c       	mov	r10, r1
 c46:	b1 2c       	mov	r11, r1
 c48:	6c 2d       	mov	r22, r12
 c4a:	7e 2f       	mov	r23, r30
 c4c:	a5 01       	movw	r20, r10
 c4e:	94 01       	movw	r18, r8
 c50:	0e 94 be 06 	call	0xd7c	; 0xd7c <__udivmodsi4>
    char c = m - base * n;
 c54:	8c 2d       	mov	r24, r12
 c56:	d2 9e       	mul	r13, r18
 c58:	80 19       	sub	r24, r0
 c5a:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 c5c:	01 50       	subi	r16, 0x01	; 1
 c5e:	11 09       	sbc	r17, r1
 c60:	8a 30       	cpi	r24, 0x0A	; 10
 c62:	14 f4       	brge	.+4      	; 0xc68 <_ZN5Print11printNumberEmh+0x6c>
 c64:	80 5d       	subi	r24, 0xD0	; 208
 c66:	01 c0       	rjmp	.+2      	; 0xc6a <_ZN5Print11printNumberEmh+0x6e>
 c68:	89 5c       	subi	r24, 0xC9	; 201
 c6a:	f8 01       	movw	r30, r16
 c6c:	80 83       	st	Z, r24
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 c6e:	21 15       	cp	r18, r1
 c70:	31 05       	cpc	r19, r1
 c72:	41 05       	cpc	r20, r1
 c74:	51 05       	cpc	r21, r1
 c76:	21 f0       	breq	.+8      	; 0xc80 <_ZN5Print11printNumberEmh+0x84>
    unsigned long m = n;
    n /= base;
 c78:	c2 2e       	mov	r12, r18
 c7a:	e3 2f       	mov	r30, r19
 c7c:	ca 01       	movw	r24, r20
 c7e:	e4 cf       	rjmp	.-56     	; 0xc48 <_ZN5Print11printNumberEmh+0x4c>
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 c80:	b8 01       	movw	r22, r16
 c82:	c7 01       	movw	r24, r14
 c84:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN5Print5writeEPKc>
}
 c88:	a1 96       	adiw	r28, 0x21	; 33
 c8a:	0f b6       	in	r0, 0x3f	; 63
 c8c:	f8 94       	cli
 c8e:	de bf       	out	0x3e, r29	; 62
 c90:	0f be       	out	0x3f, r0	; 63
 c92:	cd bf       	out	0x3d, r28	; 61
 c94:	df 91       	pop	r29
 c96:	cf 91       	pop	r28
 c98:	1f 91       	pop	r17
 c9a:	0f 91       	pop	r16
 c9c:	ff 90       	pop	r15
 c9e:	ef 90       	pop	r14
 ca0:	df 90       	pop	r13
 ca2:	cf 90       	pop	r12
 ca4:	bf 90       	pop	r11
 ca6:	af 90       	pop	r10
 ca8:	9f 90       	pop	r9
 caa:	8f 90       	pop	r8
 cac:	08 95       	ret

00000cae <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 cae:	cf 92       	push	r12
 cb0:	df 92       	push	r13
 cb2:	ef 92       	push	r14
 cb4:	ff 92       	push	r15
 cb6:	0f 93       	push	r16
 cb8:	1f 93       	push	r17
 cba:	cf 93       	push	r28
 cbc:	df 93       	push	r29
 cbe:	ec 01       	movw	r28, r24
 cc0:	6a 01       	movw	r12, r20
 cc2:	7b 01       	movw	r14, r22
  if (base == 0) {
 cc4:	21 15       	cp	r18, r1
 cc6:	31 05       	cpc	r19, r1
 cc8:	79 f4       	brne	.+30     	; 0xce8 <_ZN5Print5printEli+0x3a>
    return write(n);
 cca:	e8 81       	ld	r30, Y
 ccc:	f9 81       	ldd	r31, Y+1	; 0x01
 cce:	01 90       	ld	r0, Z+
 cd0:	f0 81       	ld	r31, Z
 cd2:	e0 2d       	mov	r30, r0
 cd4:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 cd6:	df 91       	pop	r29
 cd8:	cf 91       	pop	r28
 cda:	1f 91       	pop	r17
 cdc:	0f 91       	pop	r16
 cde:	ff 90       	pop	r15
 ce0:	ef 90       	pop	r14
 ce2:	df 90       	pop	r13
 ce4:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 ce6:	09 94       	ijmp
  } else if (base == 10) {
 ce8:	2a 30       	cpi	r18, 0x0A	; 10
 cea:	31 05       	cpc	r19, r1
 cec:	e9 f4       	brne	.+58     	; 0xd28 <_ZN5Print5printEli+0x7a>
    if (n < 0) {
 cee:	77 ff       	sbrs	r23, 7
 cf0:	1a c0       	rjmp	.+52     	; 0xd26 <_ZN5Print5printEli+0x78>
      int t = print('-');
 cf2:	6d e2       	ldi	r22, 0x2D	; 45
 cf4:	0e 94 f7 05 	call	0xbee	; 0xbee <_ZN5Print5printEc>
 cf8:	8c 01       	movw	r16, r24
      n = -n;
 cfa:	44 27       	eor	r20, r20
 cfc:	55 27       	eor	r21, r21
 cfe:	ba 01       	movw	r22, r20
 d00:	4c 19       	sub	r20, r12
 d02:	5d 09       	sbc	r21, r13
 d04:	6e 09       	sbc	r22, r14
 d06:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
 d08:	2a e0       	ldi	r18, 0x0A	; 10
 d0a:	ce 01       	movw	r24, r28
 d0c:	0e 94 fe 05 	call	0xbfc	; 0xbfc <_ZN5Print11printNumberEmh>
 d10:	80 0f       	add	r24, r16
 d12:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 d14:	df 91       	pop	r29
 d16:	cf 91       	pop	r28
 d18:	1f 91       	pop	r17
 d1a:	0f 91       	pop	r16
 d1c:	ff 90       	pop	r15
 d1e:	ef 90       	pop	r14
 d20:	df 90       	pop	r13
 d22:	cf 90       	pop	r12
 d24:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 d26:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
 d28:	b7 01       	movw	r22, r14
 d2a:	a6 01       	movw	r20, r12
 d2c:	ce 01       	movw	r24, r28
  }
}
 d2e:	df 91       	pop	r29
 d30:	cf 91       	pop	r28
 d32:	1f 91       	pop	r17
 d34:	0f 91       	pop	r16
 d36:	ff 90       	pop	r15
 d38:	ef 90       	pop	r14
 d3a:	df 90       	pop	r13
 d3c:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 d3e:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <_ZN5Print11printNumberEmh>

00000d42 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 d42:	9a 01       	movw	r18, r20
  return print((long) n, base);
 d44:	ab 01       	movw	r20, r22
 d46:	66 27       	eor	r22, r22
 d48:	57 fd       	sbrc	r21, 7
 d4a:	60 95       	com	r22
 d4c:	76 2f       	mov	r23, r22
 d4e:	0c 94 57 06 	jmp	0xcae	; 0xcae <_ZN5Print5printEli>

00000d52 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 d52:	21 15       	cp	r18, r1
 d54:	31 05       	cpc	r19, r1
 d56:	41 f4       	brne	.+16     	; 0xd68 <_ZN5Print5printEmi+0x16>
 d58:	dc 01       	movw	r26, r24
 d5a:	ed 91       	ld	r30, X+
 d5c:	fc 91       	ld	r31, X
 d5e:	01 90       	ld	r0, Z+
 d60:	f0 81       	ld	r31, Z
 d62:	e0 2d       	mov	r30, r0
 d64:	64 2f       	mov	r22, r20
 d66:	09 94       	ijmp
  else return printNumber(n, base);
 d68:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <_ZN5Print11printNumberEmh>

00000d6c <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
 d6c:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
 d6e:	46 2f       	mov	r20, r22
 d70:	50 e0       	ldi	r21, 0x00	; 0
 d72:	60 e0       	ldi	r22, 0x00	; 0
 d74:	70 e0       	ldi	r23, 0x00	; 0
 d76:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <_ZN5Print5printEmi>

00000d7a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 d7a:	08 95       	ret

00000d7c <__udivmodsi4>:
 d7c:	a1 e2       	ldi	r26, 0x21	; 33
 d7e:	1a 2e       	mov	r1, r26
 d80:	aa 1b       	sub	r26, r26
 d82:	bb 1b       	sub	r27, r27
 d84:	fd 01       	movw	r30, r26
 d86:	0d c0       	rjmp	.+26     	; 0xda2 <__udivmodsi4_ep>

00000d88 <__udivmodsi4_loop>:
 d88:	aa 1f       	adc	r26, r26
 d8a:	bb 1f       	adc	r27, r27
 d8c:	ee 1f       	adc	r30, r30
 d8e:	ff 1f       	adc	r31, r31
 d90:	a2 17       	cp	r26, r18
 d92:	b3 07       	cpc	r27, r19
 d94:	e4 07       	cpc	r30, r20
 d96:	f5 07       	cpc	r31, r21
 d98:	20 f0       	brcs	.+8      	; 0xda2 <__udivmodsi4_ep>
 d9a:	a2 1b       	sub	r26, r18
 d9c:	b3 0b       	sbc	r27, r19
 d9e:	e4 0b       	sbc	r30, r20
 da0:	f5 0b       	sbc	r31, r21

00000da2 <__udivmodsi4_ep>:
 da2:	66 1f       	adc	r22, r22
 da4:	77 1f       	adc	r23, r23
 da6:	88 1f       	adc	r24, r24
 da8:	99 1f       	adc	r25, r25
 daa:	1a 94       	dec	r1
 dac:	69 f7       	brne	.-38     	; 0xd88 <__udivmodsi4_loop>
 dae:	60 95       	com	r22
 db0:	70 95       	com	r23
 db2:	80 95       	com	r24
 db4:	90 95       	com	r25
 db6:	9b 01       	movw	r18, r22
 db8:	ac 01       	movw	r20, r24
 dba:	bd 01       	movw	r22, r26
 dbc:	cf 01       	movw	r24, r30
 dbe:	08 95       	ret

00000dc0 <__tablejump2__>:
 dc0:	ee 0f       	add	r30, r30
 dc2:	ff 1f       	adc	r31, r31

00000dc4 <__tablejump__>:
 dc4:	05 90       	lpm	r0, Z+
 dc6:	f4 91       	lpm	r31, Z
 dc8:	e0 2d       	mov	r30, r0
 dca:	09 94       	ijmp

00000dcc <__eerd_byte_m328p>:
 dcc:	f9 99       	sbic	0x1f, 1	; 31
 dce:	fe cf       	rjmp	.-4      	; 0xdcc <__eerd_byte_m328p>
 dd0:	92 bd       	out	0x22, r25	; 34
 dd2:	81 bd       	out	0x21, r24	; 33
 dd4:	f8 9a       	sbi	0x1f, 0	; 31
 dd6:	99 27       	eor	r25, r25
 dd8:	80 b5       	in	r24, 0x20	; 32
 dda:	08 95       	ret

00000ddc <__eewr_byte_m328p>:
 ddc:	26 2f       	mov	r18, r22

00000dde <__eewr_r18_m328p>:
 dde:	f9 99       	sbic	0x1f, 1	; 31
 de0:	fe cf       	rjmp	.-4      	; 0xdde <__eewr_r18_m328p>
 de2:	1f ba       	out	0x1f, r1	; 31
 de4:	92 bd       	out	0x22, r25	; 34
 de6:	81 bd       	out	0x21, r24	; 33
 de8:	20 bd       	out	0x20, r18	; 32
 dea:	0f b6       	in	r0, 0x3f	; 63
 dec:	f8 94       	cli
 dee:	fa 9a       	sbi	0x1f, 2	; 31
 df0:	f9 9a       	sbi	0x1f, 1	; 31
 df2:	0f be       	out	0x3f, r0	; 63
 df4:	01 96       	adiw	r24, 0x01	; 1
 df6:	08 95       	ret

00000df8 <_exit>:
 df8:	f8 94       	cli

00000dfa <__stop_program>:
 dfa:	ff cf       	rjmp	.-2      	; 0xdfa <__stop_program>
